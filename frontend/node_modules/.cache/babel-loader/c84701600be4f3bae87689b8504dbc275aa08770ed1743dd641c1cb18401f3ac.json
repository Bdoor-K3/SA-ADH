{"ast":null,"code":"// Import axios for making HTTP requests\nimport axios from 'axios';\n\n// Set up a base instance with the backend URL from .env\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000'\n});\n\n// Define functions to interact with your backend API\nexport const fetchEvents = async () => {\n  try {\n    const response = await api.get('/api/events');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n};\nexport const registerUser = async userData => {\n  return await api.post('/api/auth/register', userData);\n};\nexport const loginUser = async credentials => {\n  return await api.post('/api/auth/login', credentials);\n};\n\n// Create an Event\nexport const createEvent = async eventData => {\n  const formData = new FormData();\n  Object.keys(eventData).forEach(key => {\n    if (key === 'image') {\n      formData.append(key, eventData[key]);\n    } else {\n      formData.append(key, eventData[key]);\n    }\n  });\n  return await api.post('/api/events', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n// Add a request interceptor to include the token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n// Delete an Event\nexport const deleteEvent = async eventId => {\n  return await api.delete(`/api/events/${eventId}`);\n};\n\n// Update an Event\nexport const updateEvent = async (eventId, updates) => {\n  return await api.put(`/api/events/${eventId}`, updates);\n};\n\n// Export the instance for custom requests if needed\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_BACKEND_URL","fetchEvents","response","get","data","error","console","registerUser","userData","post","loginUser","credentials","createEvent","eventData","formData","FormData","Object","keys","forEach","key","append","headers","interceptors","request","use","config","token","localStorage","getItem","Promise","reject","deleteEvent","eventId","delete","updateEvent","updates","put"],"sources":["C:/Users/Administrator/Desktop/e-ticketing/frontend/src/services/api.js"],"sourcesContent":["// Import axios for making HTTP requests\r\nimport axios from 'axios';\r\n\r\n// Set up a base instance with the backend URL from .env\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000',\r\n});\r\n\r\n// Define functions to interact with your backend API\r\nexport const fetchEvents = async () => {\r\n  try {\r\n    const response = await api.get('/api/events');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching events:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n  export const registerUser = async (userData) => {\r\n    return await api.post('/api/auth/register', userData);\r\n  };\r\n  \r\n  export const loginUser = async (credentials) => {\r\n    return await api.post('/api/auth/login', credentials);\r\n  };\r\n\r\n\r\n// Create an Event\r\nexport const createEvent = async (eventData) => {\r\n  const formData = new FormData();\r\n  Object.keys(eventData).forEach((key) => {\r\n    if (key === 'image') {\r\n      formData.append(key, eventData[key]);\r\n    } else {\r\n      formData.append(key, eventData[key]);\r\n    }\r\n  });\r\n  return await api.post('/api/events', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n// Add a request interceptor to include the token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n// Delete an Event\r\nexport const deleteEvent = async (eventId) => {\r\n  return await api.delete(`/api/events/${eventId}`);\r\n};\r\n\r\n// Update an Event\r\nexport const updateEvent = async (eventId, updates) => {\r\n  return await api.put(`/api/events/${eventId}`, updates);\r\n};\r\n\r\n  // Export the instance for custom requests if needed\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI;AAChD,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAEC,OAAO,MAAME,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,OAAO,MAAMb,GAAG,CAACc,IAAI,CAAC,oBAAoB,EAAED,QAAQ,CAAC;AACvD,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,OAAO,MAAMhB,GAAG,CAACc,IAAI,CAAC,iBAAiB,EAAEE,WAAW,CAAC;AACvD,CAAC;;AAGH;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BC,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,OAAO,CAAEC,GAAG,IAAK;IACtC,IAAIA,GAAG,KAAK,OAAO,EAAE;MACnBL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEN,SAAS,CAACM,GAAG,CAAC,CAAC;IACtC,CAAC,MAAM;MACLL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEN,SAAS,CAACM,GAAG,CAAC,CAAC;IACtC;EACF,CAAC,CAAC;EACF,OAAO,MAAMxB,GAAG,CAACc,IAAI,CAAC,aAAa,EAAEK,QAAQ,EAAE;IAC7CO,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA1B,GAAG,CAAC2B,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACApB,KAAK,IAAK;EACT,OAAOwB,OAAO,CAACC,MAAM,CAACzB,KAAK,CAAC;AAC9B,CACF,CAAC;AACD;AACA,OAAO,MAAM0B,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,OAAO,MAAMrC,GAAG,CAACsC,MAAM,CAAC,eAAeD,OAAO,EAAE,CAAC;AACnD,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOF,OAAO,EAAEG,OAAO,KAAK;EACrD,OAAO,MAAMxC,GAAG,CAACyC,GAAG,CAAC,eAAeJ,OAAO,EAAE,EAAEG,OAAO,CAAC;AACzD,CAAC;;AAEC;AACF,eAAexC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}