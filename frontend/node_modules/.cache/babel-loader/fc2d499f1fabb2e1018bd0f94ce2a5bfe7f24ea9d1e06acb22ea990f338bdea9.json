{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Sa-adh\\\\frontend\\\\src\\\\pages\\\\auth\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { resetPassword } from '../../services/api';\nimport './Auth.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const {\n    token\n  } = useParams();\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setMessage('');\n    setError('');\n    try {\n      var _response$data;\n      const response = await resetPassword({\n        token,\n        password\n      });\n\n      // Check if the response is successful\n      if (response.status === 200 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.message) {\n        setMessage(response.data.message); // Display success message\n        setError(''); // Clear any error\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Error resetting password.';\n      setError(errorMessage); // Display the error message from API\n      setMessage(''); // Clear any success message\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleResetPassword,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Enter new password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"xlkUwdIZfx2Q2OV5901rO+M0Y+s=\", false, function () {\n  return [useParams];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useParams","resetPassword","jsxDEV","_jsxDEV","ResetPassword","_s","token","password","setPassword","message","setMessage","error","setError","handleResetPassword","e","preventDefault","_response$data","response","status","data","err","_err$response","_err$response$data","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/Sa-adh/frontend/src/pages/auth/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { resetPassword } from '../../services/api';\r\nimport './Auth.css';\r\n\r\nfunction ResetPassword() {\r\n  const { token } = useParams();\r\n  const [password, setPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleResetPassword = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    setError('');\r\n    try {\r\n      const response = await resetPassword({ token, password });\r\n      \r\n      // Check if the response is successful\r\n      if (response.status === 200 && response.data?.message) {\r\n        setMessage(response.data.message); // Display success message\r\n        setError(''); // Clear any error\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || 'Error resetting password.';\r\n      setError(errorMessage); // Display the error message from API\r\n      setMessage(''); // Clear any success message\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <h2>Reset Password</h2>\r\n      <form onSubmit={handleResetPassword}>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Enter new password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        {message && <p className=\"success\">{message}</p>}\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <button type=\"submit\">Reset Password</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}