{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Sa-adh\\\\frontend\\\\src\\\\pages\\\\auth\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { resetPassword } from '../../services/api';\nimport './Auth.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const {\n    token\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    t\n  } = useTranslation();\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setMessage('');\n    setError('');\n    try {\n      const response = await resetPassword({\n        token,\n        password\n      });\n      setMessage(response.data.message);\n\n      // Redirect to login page after successful reset\n      setTimeout(() => {\n        navigate('/login');\n      }, 3000);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || t('resetPassword.error');\n      setError(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: t('resetPassword.title')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleResetPassword,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: t('resetPassword.form.passwordPlaceholder'),\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: t('resetPassword.form.submitButton')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"VOij73iQZBRIO+pp2jJgfTMiFJw=\", false, function () {\n  return [useParams, useNavigate, useTranslation];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","useTranslation","resetPassword","jsxDEV","_jsxDEV","ResetPassword","_s","token","navigate","t","password","setPassword","message","setMessage","error","setError","handleResetPassword","e","preventDefault","response","data","setTimeout","err","_err$response","_err$response$data","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/Sa-adh/frontend/src/pages/auth/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { resetPassword } from '../../services/api';\r\nimport './Auth.css';\r\n\r\nfunction ResetPassword() {\r\n  const { token } = useParams();\r\n  const navigate = useNavigate();\r\n  const { t } = useTranslation();\r\n\r\n  const [password, setPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleResetPassword = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    setError('');\r\n    try {\r\n      const response = await resetPassword({ token, password });\r\n      setMessage(response.data.message);\r\n\r\n      // Redirect to login page after successful reset\r\n      setTimeout(() => {\r\n        navigate('/login');\r\n      }, 3000);\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || t('resetPassword.error');\r\n      setError(errorMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <h2>{t('resetPassword.title')}</h2>\r\n      <form onSubmit={handleResetPassword}>\r\n        <input\r\n          type=\"password\"\r\n          placeholder={t('resetPassword.form.passwordPlaceholder')}\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        {message && <p className=\"success\">{message}</p>}\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <button type=\"submit\">{t('resetPassword.form.submitButton')}</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}