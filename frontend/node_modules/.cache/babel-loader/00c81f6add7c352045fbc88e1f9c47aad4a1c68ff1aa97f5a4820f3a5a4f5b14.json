{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\e-ticketing\\\\frontend\\\\src\\\\pages\\\\organizer\\\\ScanTickets.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QrScanner from 'react-qr-scanner'; // Install this library\nimport { validateTicket } from '../../services/api'; // Add API call\nimport './ScanTickets.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScanTickets() {\n  _s();\n  const [scanResult, setScanResult] = useState('');\n  const [validationMessage, setValidationMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleScan = async data => {\n    if (data) {\n      setScanResult(data);\n      try {\n        // Validate ticket by sending QR code data and event ID to the backend\n        const eventId = window.location.pathname.split('/').pop(); // Get event ID from URL\n        const response = await validateTicket(data.text, eventId);\n        setValidationMessage(response.message);\n        setErrorMessage(''); // Clear error message\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setValidationMessage(''); // Clear validation message\n        setErrorMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error validating ticket.');\n      }\n    }\n  };\n  const handleError = err => {\n    console.error('Error scanning QR code:', err);\n    setErrorMessage('Error scanning QR code. Please try again.');\n  };\n  const previewStyle = {\n    height: 240,\n    width: 320\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-tickets\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scan Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n      delay: 300,\n      style: previewStyle,\n      onError: handleError,\n      onScan: handleScan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), scanResult && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Scanned Data: \", scanResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }, this), validationMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: validationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(ScanTickets, \"F9v0NdVnsN7VB+cVEHtbl/ZgQ/0=\");\n_c = ScanTickets;\nexport default ScanTickets;\nvar _c;\n$RefreshReg$(_c, \"ScanTickets\");","map":{"version":3,"names":["React","useState","QrScanner","validateTicket","jsxDEV","_jsxDEV","ScanTickets","_s","scanResult","setScanResult","validationMessage","setValidationMessage","errorMessage","setErrorMessage","handleScan","data","eventId","window","location","pathname","split","pop","response","text","message","error","_error$response","_error$response$data","handleError","err","console","previewStyle","height","width","className","children","fileName","_jsxFileName","lineNumber","columnNumber","delay","style","onError","onScan","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/e-ticketing/frontend/src/pages/organizer/ScanTickets.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QrScanner from 'react-qr-scanner'; // Install this library\r\nimport { validateTicket } from '../../services/api'; // Add API call\r\nimport './ScanTickets.css';\r\n\r\nfunction ScanTickets() {\r\n  const [scanResult, setScanResult] = useState('');\r\n  const [validationMessage, setValidationMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleScan = async (data) => {\r\n    if (data) {\r\n      setScanResult(data);\r\n\r\n      try {\r\n        // Validate ticket by sending QR code data and event ID to the backend\r\n        const eventId = window.location.pathname.split('/').pop(); // Get event ID from URL\r\n        const response = await validateTicket(data.text, eventId);\r\n\r\n        setValidationMessage(response.message);\r\n        setErrorMessage(''); // Clear error message\r\n      } catch (error) {\r\n        setValidationMessage(''); // Clear validation message\r\n        setErrorMessage(error.response?.data?.message || 'Error validating ticket.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleError = (err) => {\r\n    console.error('Error scanning QR code:', err);\r\n    setErrorMessage('Error scanning QR code. Please try again.');\r\n  };\r\n\r\n  const previewStyle = {\r\n    height: 240,\r\n    width: 320,\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-tickets\">\r\n      <h1>Scan Tickets</h1>\r\n      <QrScanner\r\n        delay={300}\r\n        style={previewStyle}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n      />\r\n      {scanResult && <p>Scanned Data: {scanResult}</p>}\r\n      {validationMessage && <p className=\"success\">{validationMessage}</p>}\r\n      {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanTickets;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}